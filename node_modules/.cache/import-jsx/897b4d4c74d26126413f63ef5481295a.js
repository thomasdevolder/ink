'use strict';

var utils = require('readline-utils');

var repeat = require('repeat-string');

const SnakeComp = () => {
  var windowSize = require('window-size');

  var size = windowSize.height - 10;
  var score = 0;
  var head = '^';
  var body = []; // borders are from cli-table chars: https://github.com/Automattic/cli-table/blob/master/lib/index.js#L21-L37

  var borders = {
    'top': '─',
    'top-mid': '┬',
    'top-left': '┌',
    'top-right': '┐',
    'bottom': '─',
    'bottom-mid': '┴',
    'bottom-left': '└',
    'bottom-right': '┘',
    'left': '│',
    'left-mid': '├',
    'mid': '─',
    'mid-mid': '┼',
    'right': '│',
    'right-mid': '┤',
    'middle': '│'
  };
  const emoji = ["👽", "👾", "🤖", "🎃"];

  const randomEmoji = em => {
    const number = Math.floor(Math.random() * em.length);
    return em[number];
  };

  const chosenEmoji = randomEmoji(emoji);
  var center = [Math.floor(windowSize.width / 2), Math.floor(windowSize.height / 2)];
  var len = 1;
  var direction = [0, -1];
  var position, board;

  function render() {
    rl.output.unmute();
    utils.clearScreen(rl);
    var output = '';
    var top = center[1] - Math.floor(size / 2);
    var left = center[0] - size;
    output += '\n' + repeat(' ', left) + score + '\n';
    output += repeat('\n', top - 2);
    output += repeat(' ', left);
    output += borders['top-left'] + repeat(borders.top, size * 2) + borders['top-right'] + '\n';

    for (var row = 0; row < board.length; row++) {
      output += repeat(' ', left) + borders.left;

      for (var col = 0; col < board[row].length; col++) {
        output += ' ' + board[row][col];
      }

      output += borders.right + '\n';
    }

    output += repeat(' ', left);
    output += borders['bottom-left'] + repeat(borders.bottom, size * 2) + borders['bottom-right'] + '\n';
    rl.output.write(output);
    rl.output.mute();
  }

  function move(event) {
    if (!event) return;

    switch (event.key.name) {
      case 'right':
        direction = [1, 0];
        head = '>';
        break;

      case 'left':
        direction = [-1, 0];
        head = '<';
        break;

      case 'up':
        direction = [0, -1];
        head = '^';
        break;

      case 'down':
        direction = [0, 1];
        head = 'v';
        break;
    }
  }

  function reset() {
    score = 0;
    len = 1;
    body = [];
    position = [Math.floor(size / 2), Math.floor(size / 2)];
    board = new Array(size);

    for (var i = 0; i < board.length; i++) {
      board[i] = new Array(size);

      for (var j = 0; j < board[i].length; j++) {
        board[i][j] = ' ';
      }
    }

    board[position[1]][position[0]] = head;
  }

  function tick() {
    board[position[1]][position[0]] = ' ';
    position[0] += direction[0];
    position[1] += direction[1];

    if (position[0] >= size || position[1] >= size || position[0] < 0 || position[1] < 0) {
      reset();
      return;
    }

    if (board[position[1]][position[0]] === chosenEmoji) {
      score++;
      len++;

      if (body.length) {
        body.push(position.slice());
      }
    } else if (board[position[1]][position[0]] !== ' ') {
      reset();
      return;
    }

    board[position[1]][position[0]] = head;
    body.reduce(function (acc, curr, i, arr) {
      var tail = 'X';
      var prev = i === 0 ? position : arr[i - 1];
      var next = i === arr.length - 1 ? null : arr[i + 1];

      if (prev[0] === curr[0]) {
        if (next) {
          if (next[0] === curr[0]) tail = borders.middle;else if (next[0] > curr[0]) {
            if (prev[1] < curr[1]) tail = borders['bottom-left'];else tail = borders['top-left'];
          } else {
            if (prev[1] < curr[1]) tail = borders['bottom-right'];else tail = borders['top-right'];
          }
        } else {
          tail = borders.middle;
        }
      } else if (prev[1] === curr[1]) {
        if (next) {
          if (next[1] === curr[1]) tail = borders.mid;else if (next[1] > curr[1]) {
            if (prev[0] > curr[0]) tail = borders['top-left'];else tail = borders['top-right'];
          } else {
            if (prev[0] > curr[0]) tail = borders['bottom-left'];else tail = borders['bottom-right'];
          }
        } else {
          tail = borders.mid;
        }
      }

      board[curr[1]][curr[0]] = tail;
    }, []);
    body.unshift(position.slice());

    while (body.length > len) {
      var part = body.pop();
      board[part[1]][part[0]] = ' ';
    }

    render();
  }

  function apple() {
    var x = Math.floor(Math.random() * size);
    var y = Math.floor(Math.random() * size);
    board[y][x] = chosenEmoji;
  }

  var rl = utils.createInterface();
  var width = utils.cliWidth(rl);
  rl.setPrompt('');
  utils.hideCursor(rl);
  rl.input.on('keypress', function (str, key) {
    var event = utils.normalize(str, key);
    move(event);
  });
  rl.on('line', function (line) {
    console.log('line', line);
  });
  rl.output.mute();
  reset();
  render();
  setInterval(tick, 200);
  setInterval(apple, 2000);
};

module.exports = SnakeComp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNuYWtlQ29tcC5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJyZXBlYXQiLCJTbmFrZUNvbXAiLCJ3aW5kb3dTaXplIiwic2l6ZSIsImhlaWdodCIsInNjb3JlIiwiaGVhZCIsImJvZHkiLCJib3JkZXJzIiwiZW1vamkiLCJyYW5kb21FbW9qaSIsImVtIiwibnVtYmVyIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiY2hvc2VuRW1vamkiLCJjZW50ZXIiLCJ3aWR0aCIsImxlbiIsImRpcmVjdGlvbiIsInBvc2l0aW9uIiwiYm9hcmQiLCJyZW5kZXIiLCJybCIsIm91dHB1dCIsInVubXV0ZSIsImNsZWFyU2NyZWVuIiwidG9wIiwibGVmdCIsInJvdyIsImNvbCIsInJpZ2h0IiwiYm90dG9tIiwid3JpdGUiLCJtdXRlIiwibW92ZSIsImV2ZW50Iiwia2V5IiwibmFtZSIsInJlc2V0IiwiQXJyYXkiLCJpIiwiaiIsInRpY2siLCJwdXNoIiwic2xpY2UiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwiYXJyIiwidGFpbCIsInByZXYiLCJuZXh0IiwibWlkZGxlIiwibWlkIiwidW5zaGlmdCIsInBhcnQiLCJwb3AiLCJhcHBsZSIsIngiLCJ5IiwiY3JlYXRlSW50ZXJmYWNlIiwiY2xpV2lkdGgiLCJzZXRQcm9tcHQiLCJoaWRlQ3Vyc29yIiwiaW5wdXQiLCJvbiIsInN0ciIsIm5vcm1hbGl6ZSIsImxpbmUiLCJjb25zb2xlIiwibG9nIiwic2V0SW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUFuQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQXBCOztBQUVBLE1BQU1FLFNBQVMsR0FBRyxNQUFNO0FBQ3RCLE1BQUlDLFVBQVUsR0FBR0gsT0FBTyxDQUFDLGFBQUQsQ0FBeEI7O0FBQ0EsTUFBSUksSUFB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QUFELEVBQU8sR0FBUCxDQUFYO0FBQ0E2QixFQUFBQSxXQUFXLENBQUNkLEtBQUQsRUFBUSxJQUFSLENBQVg7QUFFRCxDQXhNRDs7QUEwTUFlLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNFLFNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHV0aWxzID0gcmVxdWlyZSgncmVhZGxpbmUtdXRpbHMnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG5cbmNvbnN0IFNuYWtlQ29tcCA9ICgpID0+IHtcbiAgdmFyIHdpbmRvd1NpemUgPSByZXF1aXJlKCd3aW5kb3ctc2l6ZScpO1xuICB2YXIgc2l6ZSA9IHdpbmRvd1NpemUuaGVpZ2h0IC0gMTA7XG4gIHZhciBzY29yZSA9IDA7XG4gIHZhciBoZWFkID0gJ14nO1xuICB2YXIgYm9keSA9IFtdO1xuXG4gIC8vIGJvcmRlcnMgYXJlIGZyb20gY2xpLXRhYmxlIGNoYXJzOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9jbGktdGFibGUvYmxvYi9tYXN0ZXIvbGliL2luZGV4LmpzI0wyMS1MMzdcbiAgdmFyIGJvcmRlcnMgPSB7XG4gICAgJ3RvcCc6ICfilIAnLFxuICAgICd0b3AtbWlkJzogJ+KUrCcsXG4gICAgJ3RvcC1sZWZ0JzogJ+KUjCcsXG4gICAgJ3RvcC1yaWdodCc6ICfilJAnLFxuICAgICdib3R0b20nOiAn4pSAJyxcbiAgICAnYm90dG9tLW1pZCc6ICfilLQnLFxuICAgICdib3R0b20tbGVmdCc6ICfilJQnLFxuICAgICdib3R0b20tcmlnaHQnOiAn4pSYJyxcbiAgICAnbGVmdCc6ICfilIInLFxuICAgICdsZWZ0LW1pZCc6ICfilJwnLFxuICAgICdtaWQnOiAn4pSAJyxcbiAgICAnbWlkLW1pZCc6ICfilLwnLFxuICAgICdyaWdodCc6ICfilIInLFxuICAgICdyaWdodC1taWQnOiAn4pSkJyxcbiAgICAnbWlkZGxlJzogJ+KUgidcbiAgfTtcblxuXHRcdGNvbnN0IGVtb2ppID0gWyBcIvCfkb1cIiwgXCLwn5G+XCIsIFwi8J+kllwiLCBcIvCfjoNcIl07XG5cdFx0Y29uc3QgcmFuZG9tRW1vamkgPSAoZW0pID0+e1xuXHRcdFx0Y29uc3QgbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZW0ubGVuZ3RoKVxuXHRcdFx0cmV0dXJuIGVtW251bWJlcl07XG5cdFx0fTtcblx0XHRjb25zdCBjaG9zZW5FbW9qaSA9IHJhbmRvbUVtb2ppKGVtb2ppKTtcblxuICB2YXIgY2VudGVyID0gW1xuICAgIE1hdGguZmxvb3Iod2luZG93U2l6ZS53aWR0aCAvIDIpLFxuICAgIE1hdGguZmxvb3Iod2luZG93U2l6ZS5oZWlnaHQgLyAyKVxuICBdO1xuXG4gIHZhciBsZW4gPSAxO1xuICB2YXIgZGlyZWN0aW9uID0gWzAsIC0xXTtcbiAgdmFyIHBvc2l0aW9uLCBib2FyZDtcblxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmwub3V0cHV0LnVubXV0ZSgpO1xuICAgIHV0aWxzLmNsZWFyU2NyZWVuKHJsKTtcblxuICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICB2YXIgdG9wID0gY2VudGVyWzFdIC0gTWF0aC5mbG9vcihzaXplIC8gMik7XG4gICAgdmFyIGxlZnQgPSBjZW50ZXJbMF0gLSBzaXplO1xuICAgIG91dHB1dCArPSAnXFxuJyArIHJlcGVhdCgnICcsIGxlZnQpICsgc2NvcmUgKyAnXFxuJztcbiAgICBvdXRwdXQgKz0gcmVwZWF0KCdcXG4nLCB0b3AgLSAyKTtcbiAgICBvdXRwdXQgKz0gcmVwZWF0KCcgJywgbGVmdCk7XG4gICAgb3V0cHV0ICs9IGJvcmRlcnNbJ3RvcC1sZWZ0J10gKyByZXBlYXQoYm9yZGVycy50b3AsIChzaXplICogMikpICsgYm9yZGVyc1sndG9wLXJpZ2h0J10gKyAnXFxuJztcblxuICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IGJvYXJkLmxlbmd0aDsgcm93KyspIHtcbiAgICAgIG91dHB1dCArPSByZXBlYXQoJyAnLCBsZWZ0KSArIGJvcmRlcnMubGVmdDtcbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGJvYXJkW3Jvd10ubGVuZ3RoOyBjb2wrKykge1xuICAgICAgICBvdXRwdXQgKz0gJyAnICsgYm9hcmRbcm93XVtjb2xdO1xuICAgICAgfVxuICAgICAgb3V0cHV0ICs9IGJvcmRlcnMucmlnaHQgKyAnXFxuJztcbiAgICB9XG4gICAgb3V0cHV0ICs9IHJlcGVhdCgnICcsIGxlZnQpO1xuICAgIG91dHB1dCArPSBib3JkZXJzWydib3R0b20tbGVmdCddICsgcmVwZWF0KGJvcmRlcnMuYm90dG9tLCAoc2l6ZSAqIDIpKSArIGJvcmRlcnNbJ2JvdHRvbS1yaWdodCddICsgJ1xcbic7XG5cbiAgICBybC5vdXRwdXQud3JpdGUob3V0cHV0KTtcbiAgICBybC5vdXRwdXQubXV0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZShldmVudCkge1xuICAgIGlmICghZXZlbnQpIHJldHVybjtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleS5uYW1lKSB7XG4gICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIGRpcmVjdGlvbiA9IFsxLCAwXTtcbiAgICAgICAgaGVhZCA9ICc+JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgZGlyZWN0aW9uID0gWy0xLCAwXTtcbiAgICAgICAgaGVhZCA9ICc8JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1cCc6XG4gICAgICAgIGRpcmVjdGlvbiA9IFswLCAtMV07XG4gICAgICAgIGhlYWQgPSAnXic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgIGRpcmVjdGlvbiA9IFswLCAxXTtcbiAgICAgICAgaGVhZCA9ICd2JztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgc2NvcmUgPSAwO1xuICAgIGxlbiA9IDE7XG4gICAgYm9keSA9IFtdO1xuICAgIHBvc2l0aW9uID0gW1xuICAgICAgTWF0aC5mbG9vcihzaXplIC8gMiksXG4gICAgICBNYXRoLmZsb29yKHNpemUgLyAyKVxuICAgIF07XG5cbiAgICBib2FyZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBib2FyZFtpXSA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYm9hcmRbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgYm9hcmRbaV1bal0gPSAnICc7XG4gICAgICB9XG4gICAgfVxuICAgIGJvYXJkW3Bvc2l0aW9uWzFdXVtwb3NpdGlvblswXV0gPSBoZWFkO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljaygpIHtcbiAgICBib2FyZFtwb3NpdGlvblsxXV1bcG9zaXRpb25bMF1dID0gJyAnO1xuICAgIHBvc2l0aW9uWzBdICs9IGRpcmVjdGlvblswXTtcbiAgICBwb3NpdGlvblsxXSArPSBkaXJlY3Rpb25bMV07XG5cbiAgICBpZiAocG9zaXRpb25bMF0gPj0gc2l6ZSB8fCBwb3NpdGlvblsxXSA+PSBzaXplIHx8IHBvc2l0aW9uWzBdIDwgMCB8fCBwb3NpdGlvblsxXSA8IDApIHtcbiAgICAgIHJlc2V0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGJvYXJkW3Bvc2l0aW9uWzFdXVtwb3NpdGlvblswXV0gPT09IGNob3NlbkVtb2ppKSB7XG4gICAgICBzY29yZSsrO1xuICAgICAgbGVuKys7XG4gICAgICBpZiAoYm9keS5sZW5ndGgpIHtcbiAgICAgICAgYm9keS5wdXNoKHBvc2l0aW9uLnNsaWNlKCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm9hcmRbcG9zaXRpb25bMV1dW3Bvc2l0aW9uWzBdXSAhPT0gJyAnKSB7XG4gICAgICByZXNldCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJvYXJkW3Bvc2l0aW9uWzFdXVtwb3NpdGlvblswXV0gPSBoZWFkO1xuICAgIGJvZHkucmVkdWNlKGZ1bmN0aW9uKGFjYywgY3VyciwgaSwgYXJyKSB7XG4gICAgICB2YXIgdGFpbCA9ICdYJztcbiAgICAgIHZhciBwcmV2ID0gKGkgPT09IDAgPyBwb3NpdGlvbiA6IGFycltpIC0gMV0pO1xuICAgICAgdmFyIG5leHQgPSAoaSA9PT0gYXJyLmxlbmd0aCAtIDEgPyBudWxsIDogYXJyW2kgKyAxXSk7XG4gICAgICBpZiAocHJldlswXSA9PT0gY3VyclswXSkge1xuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgIGlmIChuZXh0WzBdID09PSBjdXJyWzBdKSB0YWlsID0gYm9yZGVycy5taWRkbGU7XG4gICAgICAgICAgZWxzZSBpZiAobmV4dFswXSA+IGN1cnJbMF0pIHtcbiAgICAgICAgICAgIGlmIChwcmV2WzFdIDwgY3VyclsxXSkgdGFpbCA9IGJvcmRlcnNbJ2JvdHRvbS1sZWZ0J107XG4gICAgICAgICAgICBlbHNlIHRhaWwgPSBib3JkZXJzWyd0b3AtbGVmdCddO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldlsxXSA8IGN1cnJbMV0pIHRhaWwgPSBib3JkZXJzWydib3R0b20tcmlnaHQnXTtcbiAgICAgICAgICAgIGVsc2UgdGFpbCA9IGJvcmRlcnNbJ3RvcC1yaWdodCddO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWlsID0gYm9yZGVycy5taWRkbGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJldlsxXSA9PT0gY3VyclsxXSkge1xuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgIGlmIChuZXh0WzFdID09PSBjdXJyWzFdKSB0YWlsID0gYm9yZGVycy5taWQ7XG4gICAgICAgICAgZWxzZSBpZiAobmV4dFsxXSA+IGN1cnJbMV0pIHtcbiAgICAgICAgICAgIGlmIChwcmV2WzBdID4gY3VyclswXSkgdGFpbCA9IGJvcmRlcnNbJ3RvcC1sZWZ0J107XG4gICAgICAgICAgICBlbHNlIHRhaWwgPSBib3JkZXJzWyd0b3AtcmlnaHQnXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZbMF0gPiBjdXJyWzBdKSB0YWlsID0gYm9yZGVyc1snYm90dG9tLWxlZnQnXTtcbiAgICAgICAgICAgIGVsc2UgdGFpbCA9IGJvcmRlcnNbJ2JvdHRvbS1yaWdodCddO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWlsID0gYm9yZGVycy5taWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJvYXJkW2N1cnJbMV1dW2N1cnJbMF1dID0gdGFpbDtcbiAgICB9LCBbXSk7XG5cbiAgICBib2R5LnVuc2hpZnQocG9zaXRpb24uc2xpY2UoKSk7XG4gICAgd2hpbGUgKGJvZHkubGVuZ3RoID4gbGVuKSB7XG4gICAgICB2YXIgcGFydCA9IGJvZHkucG9wKCk7XG4gICAgICBib2FyZFtwYXJ0WzFdXVtwYXJ0WzBdXSA9ICcgJztcbiAgICB9XG4gICAgcmVuZGVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBsZSgpIHtcbiAgICB2YXIgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNpemUpO1xuICAgIHZhciB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2l6ZSk7XG4gICAgYm9hcmRbeV1beF0gPSBjaG9zZW5FbW9qaTtcbiAgfVxuXG4gIHZhciBybCA9IHV0aWxzLmNyZWF0ZUludGVyZmFjZSgpO1xuICB2YXIgd2lkdGggPSB1dGlscy5jbGlXaWR0aChybCk7XG4gIHJsLnNldFByb21wdCgnJyk7XG4gIHV0aWxzLmhpZGVDdXJzb3IocmwpO1xuXG4gIHJsLmlucHV0Lm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uKHN0ciwga2V5KSB7XG4gICAgdmFyIGV2ZW50ID0gdXRpbHMubm9ybWFsaXplKHN0ciwga2V5KTtcbiAgICBtb3ZlKGV2ZW50KTtcbiAgfSk7XG5cbiAgcmwub24oJ2xpbmUnLCBmdW5jdGlvbihsaW5lKSB7XG4gICAgY29uc29sZS5sb2coJ2xpbmUnLCBsaW5lKTtcbiAgfSk7XG5cbiAgcmwub3V0cHV0Lm11dGUoKTtcbiAgcmVzZXQoKTtcbiAgcmVuZGVyKCk7XG5cbiAgc2V0SW50ZXJ2YWwodGljaywgMjAwKTtcbiAgc2V0SW50ZXJ2YWwoYXBwbGUsIDIwMDApO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNuYWtlQ29tcDtcbiJdfQ==