'use strict';

const React = require('react');

const {
  useState,
  useCallback,
  useEffect
} = require('react');

const {
  Box,
  Text,
  useApp,
  useInput
} = require('ink');

const TextInput = require('ink-text-input').default;

const skinTone = require('skin-tone');

const mem = require('mem');

const emoj = require('.'); // From https://usehooks.com/useDebounce/


const useDebouncedValue = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}; // Limit it to 7 results so not to overwhelm the user
// This also reduces the chance of showing unrelated emojis


const fetch = mem(async string => {
  const array = await emoj(string);
  return array.slice(0, 7);
});
const STAGE_CHECKING = 0;
const STAGE_SEARCH = 1;
const STAGE_COPIED = 2;

const QueryInput = ({
  query,
  placeholder,
  onChange
}) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
  bold: true,
  color: "cyan"
}, "\u203A", ' '), /*#__PURE__*/React.createElement(TextInput, {
  showCursor: false,
  value: query,
  placeholder: placeholder,
  onChange: onChange
}));

const CopiedMessage = ({
  emoji
}) => /*#__PURE__*/React.createElement(Text, {
  color: "green"
}, `${emoji} has been copied to the clipboard`);

const Search = ({
  query,
  emojis,
  skinNumber,
  selectedIndex,
  onChangeQuery
}) => {
  const list = emojis.map((emoji, index) => /*#__PURE__*/React.createElement(Text, {
    key: emoji,
    backgroundColor: index === selectedIndex && 'gray'
  }, ' ', skinTone(emoji, skinNumber), ' '));
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    paddingTop: 1,
    paddingBottom: emojis.length === 0 ? 2 : 0
  }, /*#__PURE__*/React.createElement(QueryInput, {
    query: query,
    placeholder: "Relevant emojis will appear when you start writing",
    onChange: onChangeQuery
  }), /*#__PURE__*/React.createElement(Box, {
    paddingTop: 1
  }, list));
};

const Emoj = ({
  skinNumber: initialSkinNumber,
  onSelectEmoji
}) => {
  const {
    exit
  } = useApp();
  const [stage, setStage] = useState(STAGE_CHECKING);
  const [query, setQuery] = useState('');
  const [emojis, setEmojis] = useState([]);
  const [skinNumber, setSkinNumber] = useState(initialSkinNumber);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [selectedEmoji, setSelectedEmoji] = useState();
  useEffect(() => {
    if (selectedEmoji && stage === STAGE_COPIED) {
      onSelectEmoji(selectedEmoji);
    }
  }, [selectedEmoji, stage, onSelectEmoji]);
  const changeQuery = useCallback(query => {
    setSelectedIndex(0);
    setEmojis([]);
    setQuery(query);
  });
  useEffect(() => {
    setStage(STAGE_SEARCH);
  }, []);
  const debouncedQuery = useDebouncedValue(query, 200);
  useEffect(() => {
    if (debouncedQuery.length <= 1) {
      return;
    }

    let isCanceled = false;

    const run = async () => {
      const emojis = await fetch(debouncedQuery); // Don't update state when this effect was canceled to avoid
      // results that don't match the search query

      if (!isCanceled) {
        setEmojis(emojis);
      }
    };

    run();
    return () => {
      isCanceled = true;
    };
  }, [debouncedQuery]);
  useInput((input, key) => {
    if (key.escape || key.ctrl && input === 'c') {
      exit();
      return;
    }

    if (key.return) {
      if (emojis.length > 0) {
        setSelectedEmoji(skinTone(emojis[selectedIndex], skinNumber));
        setStage(STAGE_COPIED);
      }

      return;
    } // Select emoji by typing a number
    // Catch all 10 keys, but handle only the same amount of keys
    // as there are currently emojis


    const numberKey = Number(input);

    if (numberKey >= 0 && numberKey <= 9) {
      if (numberKey >= 1 && numberKey <= emojis.length) {
        setSelectedEmoji(skinTone(emojis[numberKey - 1], skinNumber));
        setStage(STAGE_COPIED);
      }

      return;
    } // Filter out all ansi sequences except the up/down keys which change the skin tone
    // and left/right keys which select emoji inside a list


    const isArrowKey = key.upArrow || key.downArrow || key.leftArrow || key.rightArrow;

    if (!isArrowKey || query.length <= 1) {
      return;
    }

    if (key.upArrow && skinNumber < 5) {
      setSkinNumber(skinNumber + 1);
    }

    if (key.downArrow && skinNumber > 0) {
      setSkinNumber(skinNumber - 1);
    }

    if (key.rightArrow) {
      if (selectedIndex < emojis.length - 1) {
        setSelectedIndex(selectedIndex + 1);
      } else {
        setSelectedIndex(0);
      }
    }

    if (key.leftArrow) {
      if (selectedIndex > 0) {
        setSelectedIndex(selectedIndex - 1);
      } else {
        setSelectedIndex(emojis.length - 1);
      }
    }
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, stage === STAGE_COPIED && /*#__PURE__*/React.createElement(CopiedMessage, {
    emoji: selectedEmoji
  }), stage === STAGE_SEARCH && /*#__PURE__*/React.createElement(Search, {
    query: query,
    emojis: emojis,
    skinNumber: skinNumber,
    selectedIndex: selectedIndex,
    onChangeQuery: changeQuery
  }));
};

module.exports = Emoj;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ1c2VFZmZlY3QiLCJCb3giLCJUZXh0IiwidXNlQXBwIiwidXNlSW5wdXQiLCJUZXh0SW5wdXQiLCJkZWZhdWx0Iiwic2tpblRvbmUiLCJtZW0iLCJlbW9qIiwidXNlRGVib3VuY2VkVmFsdWUiLCJ2YWx1ZSIsImRlbGF5IiwiZGVib3VuY2VkVmFsdWUiLCJzZXREZWJvdW5jZWRWYWx1ZSIsInRpbWVyIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImZldGNoIiwic3RyaW5nIiwiYXJyYXkiLCJzbGljZSIsIlNUQUdFX0NIRUNLSU5HIiwiU1RBR0VfU0VBUkNIIiwiU1RBR0VfQ09QSUVEIiwiUXVlcnlJbnB1dCIsInF1ZXJ5IiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsIkNvcGllZE1lc3NhZ2UiLCJlbW9qaSIsIlNlYXJjaCIsImVtb2ppcyIsInNraW5OdW1iZXIiLCJzZWxlY3RlZEluZGV4Iiwib25DaGFuZ2VRdWVyeSIsImxpc3QiLCJtYXAiLCJpbmRleCIsImxlbmd0aCIsIkVtb2oiLCJpbml0aWFsU2tpbk51bWJlciIsIm9uU2VsZWN0RW1vamkiLCJleGl0Iiwic3RhZ2UiLCJzZXRTdGFnZSIsInNldFF1ZXJ5Iiwic2V0RW1vamlzIiwic2V0U2tpbk51bWJlciIsInNldFNlbGVjdGVkSW5kZXgiLCJzZWxlY3RlZEVtb2ppIiwic2V0U2VsZWN0ZWRFbW9qaSIsImNoYW5nZVF1ZXJ5IiwiZGVib3VuY2VkUXVlcnkiLCJpc0NhbmNlbGVkIiwicnVuIiwiaW5wdXQiLCJrZXkiLCJlc2NhcGUiLCJjdHJsIiwicmV0dXJuIiwibnVtYmVyS2V5IiwiTnVtYmVyIiwiaXNBcnJvd0tleSIsInVwQXJyb3ciLCJkb3duQXJyb3ciLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FB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QixJQUhGLENBREQ7QUFjQSxDQTlIRDs7QUFnSUFnQixNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixJQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge0JveCwgVGV4dCwgdXNlQXBwLCB1c2VJbnB1dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoJ2luay10ZXh0LWlucHV0JykuZGVmYXVsdDtcbmNvbnN0IHNraW5Ub25lID0gcmVxdWlyZSgnc2tpbi10b25lJyk7XG5jb25zdCBtZW0gPSByZXF1aXJlKCdtZW0nKTtcbmNvbnN0IGVtb2ogPSByZXF1aXJlKCcuJyk7XG5cbi8vIEZyb20gaHR0cHM6Ly91c2Vob29rcy5jb20vdXNlRGVib3VuY2UvXG5jb25zdCB1c2VEZWJvdW5jZWRWYWx1ZSA9ICh2YWx1ZSwgZGVsYXkpID0+IHtcblx0Y29uc3QgW2RlYm91bmNlZFZhbHVlLCBzZXREZWJvdW5jZWRWYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0c2V0RGVib3VuY2VkVmFsdWUodmFsdWUpO1xuXHRcdH0sIGRlbGF5KTtcblxuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGltZXIpO1xuXHRcdH07XG5cdH0sIFt2YWx1ZSwgZGVsYXldKTtcblxuXHRyZXR1cm4gZGVib3VuY2VkVmFsdWU7XG59O1xuXG4vLyBMaW1pdCBpdCB0byA3IHJlc3VsdHMgc28gbm90IHRvIG92ZXJ3aGVsbSB0aGUgdXNlclxuLy8gVGhpcyBhbHNvIHJlZHVjZXMgdGhlIGNoYW5jZSBvZiBzaG93aW5nIHVucmVsYXRlZCBlbW9qaXNcbmNvbnN0IGZldGNoID0gbWVtKGFzeW5jIHN0cmluZyA9PiB7XG5cdGNvbnN0IGFycmF5ID0gYXdhaXQgZW1vaihzdHJpbmcpO1xuXHRyZXR1cm4gYXJyYXkuc2xpY2UoMCwgNyk7XG59KTtcblxuY29uc3QgU1RBR0VfQ0hFQ0tJTkcgPSAwO1xuY29uc3QgU1RBR0VfU0VBUkNIID0gMTtcbmNvbnN0IFNUQUdFX0NPUElFRCA9IDI7XG5cbmNvbnN0IFF1ZXJ5SW5wdXQgPSAoe3F1ZXJ5LCBwbGFjZWhvbGRlciwgb25DaGFuZ2V9KSA9PiAoXG5cdDxCb3g+XG5cdFx0PFRleHQgYm9sZCBjb2xvcj1cImN5YW5cIj5cblx0XHRcdOKAunsnICd9XG5cdFx0PC9UZXh0PlxuXG5cdFx0PFRleHRJbnB1dCBzaG93Q3Vyc29yPXtmYWxzZX0gdmFsdWU9e3F1ZXJ5fSBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXtvbkNoYW5nZX0vPlxuXHQ8L0JveD5cbik7XG5cbmNvbnN0IENvcGllZE1lc3NhZ2UgPSAoe2Vtb2ppfSkgPT4gKFxuXHQ8VGV4dCBjb2xvcj1cImdyZWVuXCI+XG5cdFx0e2Ake2Vtb2ppfSBoYXMgYmVlbiBjb3BpZWQgdG8gdGhlIGNsaXBib2FyZGB9XG5cdDwvVGV4dD5cbik7XG5cbmNvbnN0IFNlYXJjaCA9ICh7cXVlcnksIGVtb2ppcywgc2tpbk51bWJlciwgc2VsZWN0ZWRJbmRleCwgb25DaGFuZ2VRdWVyeX0pID0+IHtcblx0Y29uc3QgbGlzdCA9IGVtb2ppcy5tYXAoKGVtb2ppLCBpbmRleCkgPT4gKFxuXHRcdDxUZXh0XG5cdFx0XHRrZXk9e2Vtb2ppfVxuXHRcdFx0YmFja2dyb3VuZENvbG9yPXtpbmRleCA9PT0gc2VsZWN0ZWRJbmRleCAmJiAnZ3JheSd9XG5cdFx0PlxuXHRcdFx0eycgJ31cblx0XHRcdHtza2luVG9uZShlbW9qaSwgc2tpbk51bWJlcil9XG5cdFx0XHR7JyAnfVxuXHRcdDwvVGV4dD5cblx0KSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBwYWRkaW5nVG9wPXsxfSBwYWRkaW5nQm90dG9tPXtlbW9qaXMubGVuZ3RoID09PSAwID8gMiA6IDB9PlxuXHRcdFx0PFF1ZXJ5SW5wdXRcblx0XHRcdFx0cXVlcnk9e3F1ZXJ5fVxuXHRcdFx0XHRwbGFjZWhvbGRlcj1cIlJlbGV2YW50IGVtb2ppcyB3aWxsIGFwcGVhciB3aGVuIHlvdSBzdGFydCB3cml0aW5nXCJcblx0XHRcdFx0b25DaGFuZ2U9e29uQ2hhbmdlUXVlcnl9XG5cdFx0XHQvPlxuXHRcdFx0PEJveCBwYWRkaW5nVG9wPXsxfT5cblx0XHRcdFx0e2xpc3R9XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbmNvbnN0IEVtb2ogPSAoe3NraW5OdW1iZXI6IGluaXRpYWxTa2luTnVtYmVyLCBvblNlbGVjdEVtb2ppfSkgPT4ge1xuXHRjb25zdCB7ZXhpdH0gPSB1c2VBcHAoKTtcblx0Y29uc3QgW3N0YWdlLCBzZXRTdGFnZV0gPSB1c2VTdGF0ZShTVEFHRV9DSEVDS0lORyk7XG5cdGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoJycpO1xuXHRjb25zdCBbZW1vamlzLCBzZXRFbW9qaXNdID0gdXNlU3RhdGUoW10pO1xuXHRjb25zdCBbc2tpbk51bWJlciwgc2V0U2tpbk51bWJlcl0gPSB1c2VTdGF0ZShpbml0aWFsU2tpbk51bWJlcik7XG5cdGNvbnN0IFtzZWxlY3RlZEluZGV4LCBzZXRTZWxlY3RlZEluZGV4XSA9IHVzZVN0YXRlKDApO1xuXHRjb25zdCBbc2VsZWN0ZWRFbW9qaSwgc2V0U2VsZWN0ZWRFbW9qaV0gPSB1c2VTdGF0ZSgpO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aWYgKHNlbGVjdGVkRW1vamkgJiYgc3RhZ2UgPT09IFNUQUdFX0NPUElFRCkge1xuXHRcdFx0b25TZWxlY3RFbW9qaShzZWxlY3RlZEVtb2ppKTtcblx0XHR9XG5cdH0sIFtzZWxlY3RlZEVtb2ppLCBzdGFnZSwgb25TZWxlY3RFbW9qaV0pO1xuXG5cdGNvbnN0IGNoYW5nZVF1ZXJ5ID0gdXNlQ2FsbGJhY2socXVlcnkgPT4ge1xuXHRcdHNldFNlbGVjdGVkSW5kZXgoMCk7XG5cdFx0c2V0RW1vamlzKFtdKTtcblx0XHRzZXRRdWVyeShxdWVyeSk7XG5cdH0pO1xuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0c2V0U3RhZ2UoU1RBR0VfU0VBUkNIKTtcblx0fSwgW10pO1xuXG5cdGNvbnN0IGRlYm91bmNlZFF1ZXJ5ID0gdXNlRGVib3VuY2VkVmFsdWUocXVlcnksIDIwMCk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoZGVib3VuY2VkUXVlcnkubGVuZ3RoIDw9IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsZXQgaXNDYW5jZWxlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgcnVuID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0Y29uc3QgZW1vamlzID0gYXdhaXQgZmV0Y2goZGVib3VuY2VkUXVlcnkpO1xuXG5cdFx0XHQvLyBEb24ndCB1cGRhdGUgc3RhdGUgd2hlbiB0aGlzIGVmZmVjdCB3YXMgY2FuY2VsZWQgdG8gYXZvaWRcblx0XHRcdC8vIHJlc3VsdHMgdGhhdCBkb24ndCBtYXRjaCB0aGUgc2VhcmNoIHF1ZXJ5XG5cdFx0XHRpZiAoIWlzQ2FuY2VsZWQpIHtcblx0XHRcdFx0c2V0RW1vamlzKGVtb2ppcyk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJ1bigpO1xuXG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGlzQ2FuY2VsZWQgPSB0cnVlO1xuXHRcdH07XG5cdH0sIFtkZWJvdW5jZWRRdWVyeV0pO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGtleS5lc2NhcGUgfHwgKGtleS5jdHJsICYmIGlucHV0ID09PSAnYycpKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGtleS5yZXR1cm4pIHtcblx0XHRcdGlmIChlbW9qaXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRzZXRTZWxlY3RlZEVtb2ppKHNraW5Ub25lKGVtb2ppc1tzZWxlY3RlZEluZGV4XSwgc2tpbk51bWJlcikpO1xuXHRcdFx0XHRzZXRTdGFnZShTVEFHRV9DT1BJRUQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gU2VsZWN0IGVtb2ppIGJ5IHR5cGluZyBhIG51bWJlclxuXHRcdC8vIENhdGNoIGFsbCAxMCBrZXlzLCBidXQgaGFuZGxlIG9ubHkgdGhlIHNhbWUgYW1vdW50IG9mIGtleXNcblx0XHQvLyBhcyB0aGVyZSBhcmUgY3VycmVudGx5IGVtb2ppc1xuXHRcdGNvbnN0IG51bWJlcktleSA9IE51bWJlcihpbnB1dCk7XG5cdFx0aWYgKG51bWJlcktleSA+PSAwICYmIG51bWJlcktleSA8PSA5KSB7XG5cdFx0XHRpZiAobnVtYmVyS2V5ID49IDEgJiYgbnVtYmVyS2V5IDw9IGVtb2ppcy5sZW5ndGgpIHtcblx0XHRcdFx0c2V0U2VsZWN0ZWRFbW9qaShza2luVG9uZShlbW9qaXNbbnVtYmVyS2V5IC0gMV0sIHNraW5OdW1iZXIpKTtcblx0XHRcdFx0c2V0U3RhZ2UoU1RBR0VfQ09QSUVEKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlciBvdXQgYWxsIGFuc2kgc2VxdWVuY2VzIGV4Y2VwdCB0aGUgdXAvZG93biBrZXlzIHdoaWNoIGNoYW5nZSB0aGUgc2tpbiB0b25lXG5cdFx0Ly8gYW5kIGxlZnQvcmlnaHQga2V5cyB3aGljaCBzZWxlY3QgZW1vamkgaW5zaWRlIGEgbGlzdFxuXHRcdGNvbnN0IGlzQXJyb3dLZXkgPSBrZXkudXBBcnJvdyB8fCBrZXkuZG93bkFycm93IHx8IGtleS5sZWZ0QXJyb3cgfHwga2V5LnJpZ2h0QXJyb3c7XG5cblx0XHRpZiAoIWlzQXJyb3dLZXkgfHwgcXVlcnkubGVuZ3RoIDw9IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoa2V5LnVwQXJyb3cgJiYgc2tpbk51bWJlciA8IDUpIHtcblx0XHRcdHNldFNraW5OdW1iZXIoc2tpbk51bWJlciArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChrZXkuZG93bkFycm93ICYmIHNraW5OdW1iZXIgPiAwKSB7XG5cdFx0XHRzZXRTa2luTnVtYmVyKHNraW5OdW1iZXIgLSAxKTtcblx0XHR9XG5cblx0XHRpZiAoa2V5LnJpZ2h0QXJyb3cpIHtcblx0XHRcdGlmIChzZWxlY3RlZEluZGV4IDwgZW1vamlzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0c2V0U2VsZWN0ZWRJbmRleChzZWxlY3RlZEluZGV4ICsgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRTZWxlY3RlZEluZGV4KDApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChrZXkubGVmdEFycm93KSB7XG5cdFx0XHRpZiAoc2VsZWN0ZWRJbmRleCA+IDApIHtcblx0XHRcdFx0c2V0U2VsZWN0ZWRJbmRleChzZWxlY3RlZEluZGV4IC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRTZWxlY3RlZEluZGV4KGVtb2ppcy5sZW5ndGggLSAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiAoXG5cdFx0PD5cblx0XHRcdHtzdGFnZSA9PT0gU1RBR0VfQ09QSUVEICYmIDxDb3BpZWRNZXNzYWdlIGVtb2ppPXtzZWxlY3RlZEVtb2ppfS8+fVxuXHRcdFx0e3N0YWdlID09PSBTVEFHRV9TRUFSQ0ggJiYgKFxuXHRcdFx0XHQ8U2VhcmNoXG5cdFx0XHRcdFx0cXVlcnk9e3F1ZXJ5fVxuXHRcdFx0XHRcdGVtb2ppcz17ZW1vamlzfVxuXHRcdFx0XHRcdHNraW5OdW1iZXI9e3NraW5OdW1iZXJ9XG5cdFx0XHRcdFx0c2VsZWN0ZWRJbmRleD17c2VsZWN0ZWRJbmRleH1cblx0XHRcdFx0XHRvbkNoYW5nZVF1ZXJ5PXtjaGFuZ2VRdWVyeX1cblx0XHRcdFx0Lz5cblx0XHRcdCl9XG5cdFx0PC8+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVtb2o7XG4iXX0=